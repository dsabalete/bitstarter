{"ts":1373620709549,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n  Module dependencies\n*/\n\nvar path = require('path'),\n    select = require('cheerio-select'),\n    parse = require('./parse'),\n    evaluate = parse.evaluate,\n    updateDOM = parse.update,\n    _ = require('underscore');\n\n/*\n * The API\n */\n\nvar api = ['attributes', 'traversing', 'manipulation'];\n\n/*\n * A simple way to check for HTML strings or ID strings\n */\n\nvar quickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\n\n/**\n * Static Methods\n */\n\nvar $ = require('./static');\n\n/*\n * Instance of cheerio\n */\n\nvar Cheerio = module.exports = function(selector, context, root) {\n  if (!(this instanceof Cheerio)) return new Cheerio(selector, context, root);\n\n  // $(), $(null), $(undefined), $(false)\n  if (!selector) return this;\n\n  if (root) {\n    if (typeof root === 'string') root = parse(root);\n    this._root = this.make(root, this);\n  }\n\n  // $($)\n  if (selector.cheerio) return selector;\n\n  // $(dom)\n  if (selector.name || Array.isArray(selector))\n    return this.make(selector, this);\n\n  // $(<html>)\n  if (typeof selector === 'string' && isHtml(selector)) {\n    return this.make(parse(selector).children);\n  }\n\n  // If we don't have a context, maybe we have a root, from loading\n  if (!context) {\n    context = this._root;\n  } else if (typeof context === 'string') {\n    if (isHtml(context)) {\n      // $('li', '<ul>...</ul>')\n      context = parse(context);\n      context = this.make(context, this);\n    } else {\n      // $('li', 'ul')\n      selector = [context, selector].join(' ');\n      context = this._root;\n    }\n  }\n\n  // If we still don't have a context, return\n  if (!context) return this;\n\n  // #id, .class, tag\n  return context.find(selector);\n};\n\n/**\n * Inherit from `static`\n */\n\nCheerio.__proto__ = require('./static');\n\n/*\n * Set a signature of the object\n */\n\nCheerio.prototype.cheerio = '[cheerio object]';\n\n/*\n * Cheerio default options\n */\n\nCheerio.prototype.options = {\n  ignoreWhitespace: false,\n  xmlMode: false,\n  lowerCaseTags: false\n};\n\n/*\n * Make cheerio an array-like object\n */\n\nCheerio.prototype.length = 0;\nCheerio.prototype.sort = [].splice;\n\n/*\n * Check if string is HTML\n */\nvar isHtml = function(str) {\n  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML\n  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;\n\n  // Run the regex\n  var match = quickExpr.exec(str);\n  return !!(match && match[1]);\n};\n\n/*\n * Make a cheerio object\n */\n\nCheerio.prototype.make = function(dom, context) {\n  if (dom.cheerio) return dom;\n  dom = (Array.isArray(dom)) ? dom : [dom];\n  return _.extend(context || new Cheerio(), dom, { length: dom.length });\n};\n\n/**\n * Turn a cheerio object into an array\n */\n\nCheerio.prototype.toArray = function() {\n  return [].slice.call(this, 0);\n};\n\n/**\n * Plug in the API\n */\napi.forEach(function(mod) {\n  _.extend(Cheerio.prototype, require('./api/' + mod));\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":2905}]],"length":2905}
